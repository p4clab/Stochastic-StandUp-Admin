{"version":3,"sources":["serviceWorker.ts","redux/ducks.ts","redux/data.ts","component/SelectedUser.tsx","component/UserList.tsx","component/EventList.tsx","component/PlaceList.tsx","component/MissionList.tsx","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","RequestType","toOverallStat","payload","createTime","updateTime","numPlaces","incentive","numVisit","numSuccess","numMission","numDaysMissions","lastMissionDay","EMAIL_TO_NAME","Map","fetch","rootSaga","PREFIX","HOST_URL","FETCH_REQUESTED","FETCH_IN_PROGRESS","FETCH_SUCCESS","FETCH_FAILURE","fetchInProgress","query","email","type","fetchSuccess","result","fetchFailure","reason","action","requestType","url","data","transform","put","request","GET","axios","get","post","config","headers","call","response","buildQueryString","map","Array","from","keys","filter","key","undefined","join","QUERY_LIST_USERS","QUERY_LIST_EVENTS","QUERY_LIST_MISSIONS","QUERY_LIST_PLACES","takeEvery","ViewType","UserList","onUserClick","userStats","useSelector","state","isInProgress","stat","name","create","DateFns","update","mission","days","value","icon","onClick","event","rowData","isArray","dispatch","useDispatch","useEffect","Object","title","columns","field","actions","isLoading","options","actionsColumnIndex","showTitle","exportButton","paging","useStyles","makeStyles","theme","createStyles","toolBarControl","marginLeft","spacing","progress","marginTop","display","justifyContent","EventList","classes","useState","isRangeChecked","fromDate","Date","now","getTime","toDate","setState","events","selectedUserStat","date","startTime","endTime","duration","Math","floor","latitude","longitude","geoHash","time","durationStr","handleFromDateChanged","selectedDate","handleToDateChanged","handleRangeChecked","target","checked","loadData","useCallback","start","end","diffDays","i","s","e","push","fromTime","toTime","limit","console","log","id","toSedentaryEvent","listEvents","export","hidden","components","Toolbar","props","FormControlLabel","className","control","Switch","onChange","color","label","variant","format","exportFileName","PlaceList","places","place","address","latlon","Geohash","lastVisitTime","toPlaceStat","listPlaces","MissionList","missions","triggerTime","prepareTime","standByTime","reactionTime","max","toMission","listMissions","SelectedUser","viewType","Events","Tabs","newValue","Tab","Missions","Places","getTabPanel","App","showUsers","selectedEmail","Container","maxWidth","CssBaseline","AppBar","position","IconButton","edge","Typography","logger","createLogger","sagaMiddleware","createSagaMiddleware","store","createStore","success","applyMiddleware","createMuiTheme","palette","run","ReactDOM","ThemeProvider","utils","DateFnsUtils","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f49b2b83.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n    Mission,\r\n    OverallStat,\r\n    PlaceStat,\r\n    SedentaryEvent,\r\n    toOverallStat,\r\n    toMission,\r\n    toSedentaryEvent, toPlaceStat\r\n} from \"./data\";\r\nimport axios from 'axios'\r\nimport {call, put, takeEvery} from 'redux-saga/effects'\r\nconst PREFIX = 'stochastic-stand-up/admin/'\r\nconst HOST_URL = \"http://localhost:8080\"\r\n\r\n/** STATE **/\r\n\r\nexport interface UserStat {\r\n    email: string,\r\n    stat: OverallStat,\r\n}\r\n\r\nexport interface SelectedUserStat {\r\n    email?: string,\r\n    stat?: OverallStat,\r\n    events?: Array<SedentaryEvent>,\r\n    missions?: Array<Mission>,\r\n    places?: Array<PlaceStat>\r\n}\r\n\r\nexport interface GlobalState {\r\n    isInProgress: boolean,\r\n    userStats: Array<UserStat>,\r\n    selectedUserStat: SelectedUserStat\r\n}\r\n\r\n/** FETCH **/\r\n\r\nconst FETCH_REQUESTED = `${PREFIX}fetch-requested`\r\nconst FETCH_IN_PROGRESS = `${PREFIX}fetch-in-progress`\r\nconst FETCH_SUCCESS = `${PREFIX}fetch-success`\r\nconst FETCH_FAILURE = `${PREFIX}fetch-failure`\r\n\r\ninterface FetchRequestedAction {\r\n    type: typeof FETCH_REQUESTED,\r\n    query: string,\r\n    email?: string,\r\n    requestType: RequestType,\r\n    url: string,\r\n    data?: any,\r\n    transform?: (payload: any) => any\r\n}\r\n\r\nenum RequestType { GET, POST }\r\n\r\ninterface FetchInProgressAction {\r\n    type: typeof FETCH_IN_PROGRESS,\r\n    query: string,\r\n    email?: string\r\n}\r\n\r\ninterface FetchSuccessAction<T> {\r\n    type: typeof FETCH_SUCCESS,\r\n    query: string,\r\n    email?: string,\r\n    result?: T\r\n}\r\n\r\ninterface FetchFailureAction {\r\n    type: typeof FETCH_FAILURE,\r\n    query: string,\r\n    email?: string,\r\n    reason?: any\r\n}\r\n\r\ntype Action = FetchInProgressAction | FetchSuccessAction<any> | FetchFailureAction\r\n\r\nconst fetchInProgress = (query: string, email?: string): FetchInProgressAction => ({\r\n    type: FETCH_IN_PROGRESS,\r\n    query,\r\n    email\r\n})\r\n\r\nconst fetchSuccess = <T>(query: string, email?: string, result?: T): FetchSuccessAction<T> => ({\r\n    type: FETCH_SUCCESS,\r\n    query,\r\n    email,\r\n    result\r\n})\r\n\r\nconst fetchFailure = (query: string, email?: string, reason?: any): FetchFailureAction => ({\r\n    type: FETCH_FAILURE,\r\n    query,\r\n    email,\r\n    reason\r\n})\r\n\r\nfunction* fetch(action: FetchRequestedAction) {\r\n    const {query, requestType, url, data, transform, email} = action\r\n    yield put(fetchInProgress(query, email))\r\n\r\n    const request = requestType === RequestType.GET ? axios.get : axios.post\r\n    const config = {\r\n        headers: {\r\n            \"Content-Type\": \"application/x-www-form-urlencoded\"\r\n        }\r\n    }\r\n\r\n    try {\r\n        const response = yield call(request, url, data, config)\r\n        let result\r\n        if (transform) {\r\n            result = transform(response.data)\r\n        } else {\r\n            result = response.data\r\n        }\r\n        yield put(fetchSuccess(query, email, result))\r\n    } catch (reason) {\r\n        yield put(fetchFailure(query, email, reason))\r\n    }\r\n}\r\n\r\nconst buildQueryString = (map: Map<string, any | undefined>): string =>\r\n    Array.from(map.keys()).filter(\r\n        key => map.get(key) !== undefined\r\n    ).map(key => `${key}=${map.get(key)}`).join(\"&\")\r\n\r\n\r\n/**\r\n * List Users\r\n */\r\nconst QUERY_LIST_USERS = `${PREFIX}list-users`\r\n\r\nexport const listUsers = (): FetchRequestedAction => {\r\n    const transform = (payload: any): Array<UserStat> => Object.keys(payload).map(value => ({\r\n        email: value,\r\n        stat: toOverallStat(payload[value])\r\n    }))\r\n\r\n    return {\r\n        type: FETCH_REQUESTED,\r\n        query: QUERY_LIST_USERS,\r\n        requestType: RequestType.GET,\r\n        url: `${HOST_URL}/users`,\r\n        transform\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * List Events\r\n */\r\nconst QUERY_LIST_EVENTS = `${PREFIX}list-events`\r\n\r\nexport const listEvents = (\r\n    email: string,\r\n    fromTime: number | Array<number>,\r\n    toTime: number | Array<number>,\r\n    limit?: number\r\n): FetchRequestedAction => {\r\n    const transform = (payload: Array<any>): Array<SedentaryEvent> => payload.map(value => (toSedentaryEvent(value)))\r\n\r\n    const query = new Map<string, any>([\r\n        ['fromTime', fromTime],\r\n        ['toTime', toTime],\r\n        ['limit', limit]\r\n    ])\r\n\r\n    console.log(query)\r\n\r\n    return {\r\n        type: FETCH_REQUESTED,\r\n        query: QUERY_LIST_EVENTS,\r\n        requestType: RequestType.GET,\r\n        url: `${HOST_URL}/users/${email}/events?${buildQueryString(query)}`,\r\n        transform,\r\n        email\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * List Missions\r\n */\r\nconst QUERY_LIST_MISSIONS = `${PREFIX}list-missions`\r\n\r\nexport const listMissions = (\r\n    email: string,\r\n    fromTime: number,\r\n    toTime: number,\r\n    limit?: number\r\n): FetchRequestedAction => {\r\n    const transform = (payload: Array<any>) : Array<Mission> => payload.map(value => toMission(value))\r\n    const query = new Map([\r\n        ['fromTime', fromTime],\r\n        ['toTime', toTime],\r\n        ['limit', limit]\r\n    ])\r\n    return {\r\n        type: FETCH_REQUESTED,\r\n        query: QUERY_LIST_MISSIONS,\r\n        requestType: RequestType.GET,\r\n        url: `${HOST_URL}/users/${email}/missions?${buildQueryString(query)}`,\r\n        transform,\r\n        email\r\n    }\r\n}\r\n\r\n/**\r\n * List Places\r\n */\r\nconst QUERY_LIST_PLACES = `${PREFIX}list-places`\r\n\r\nexport const listPlaces = (\r\n    email: string,\r\n    limit?: number\r\n): FetchRequestedAction => {\r\n    const transform = (payload: Array<any>) => payload.map(value => toPlaceStat(value))\r\n    const query = new Map([\r\n        ['limit', limit]\r\n    ])\r\n    return {\r\n        type: FETCH_REQUESTED,\r\n        query: QUERY_LIST_PLACES,\r\n        requestType: RequestType.GET,\r\n        url: `${HOST_URL}/users/${email}/places?${buildQueryString(query)}`,\r\n        transform,\r\n        email\r\n    }\r\n}\r\n\r\nexport const reducer = (state: GlobalState = {\r\n    isInProgress: false,\r\n    userStats: [],\r\n    selectedUserStat: {}\r\n}, action: Action): GlobalState => {\r\n    switch (action.type) {\r\n        case FETCH_IN_PROGRESS:\r\n            return {...state, isInProgress: true}\r\n        case FETCH_SUCCESS:\r\n            let success\r\n            switch (action.query) {\r\n                case QUERY_LIST_EVENTS:\r\n                    success = action as FetchSuccessAction<Array<SedentaryEvent>>\r\n                    return {\r\n                        ...state,\r\n                        isInProgress: false,\r\n                        selectedUserStat: {\r\n                            ...state.selectedUserStat,\r\n                            events: success.result\r\n                        }\r\n                    }\r\n                case QUERY_LIST_MISSIONS:\r\n                    success = action as FetchSuccessAction<Array<Mission>>\r\n                    return {\r\n                        ...state,\r\n                        isInProgress: false,\r\n                        selectedUserStat: {\r\n                            ...state.selectedUserStat,\r\n                            missions: success.result\r\n                        }\r\n                    }\r\n                case QUERY_LIST_PLACES:\r\n                    success = action as FetchSuccessAction<Array<PlaceStat>>\r\n                    return {\r\n                        ...state,\r\n                        isInProgress: false,\r\n                        selectedUserStat: {\r\n                            ...state.selectedUserStat,\r\n                            places: success.result\r\n                        }\r\n                    }\r\n                case QUERY_LIST_USERS:\r\n                    success = action as FetchSuccessAction<Array<UserStat>>\r\n                    return {...state, isInProgress: false, userStats: success.result ?? []}\r\n                default:\r\n                    return {...state, isInProgress: false}\r\n            }\r\n        case FETCH_FAILURE:\r\n            return {...state, isInProgress: false}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default function* rootSaga() {\r\n    yield takeEvery(FETCH_REQUESTED, fetch)\r\n}\r\n\r\n\r\n","export interface SedentaryEvent {\r\n    id: string,\r\n    startTime: number,\r\n    endTime: number,\r\n    duration: number,\r\n    latitude: number,\r\n    longitude: number,\r\n    geoHash: string\r\n}\r\n\r\n\r\nexport const toSedentaryEvent = (payload: any): SedentaryEvent => ({\r\n    id: payload['id'],\r\n    startTime: payload['startTime'],\r\n    endTime: payload['endTime'],\r\n    duration: payload['duration'],\r\n    latitude: payload['latitude'],\r\n    longitude: payload['longitude'],\r\n    geoHash: payload['geoHash']\r\n})\r\n\r\n\r\nexport interface Mission {\r\n    id: string,\r\n    prepareTime: number,\r\n    standByTime: number,\r\n    triggerTime: number,\r\n    reactionTime: number,\r\n    state: string,\r\n    latitude: number,\r\n    longitude: number,\r\n    geoHash: string,\r\n    incentive: number\r\n}\r\n\r\nexport const toMission = (payload: any): Mission => ({\r\n    id: payload['id'],\r\n    prepareTime: payload['prepareTime'],\r\n    standByTime: payload['standByTime'],\r\n    triggerTime: payload['triggerTime'],\r\n    reactionTime: payload['reactionTime'],\r\n    state: payload['state'],\r\n    latitude: payload['latitude'],\r\n    longitude: payload['longitude'],\r\n    geoHash: payload['geoHash'],\r\n    incentive: payload['incentive']\r\n})\r\n\r\nexport interface PlaceStat {\r\n    id: string,\r\n    name: string,\r\n    address: string,\r\n    incentive: number,\r\n    numVisit: number,\r\n    numMission: number,\r\n    numSuccess: number,\r\n    lastVisitTime: number\r\n}\r\n\r\nexport const toPlaceStat = (payload: any): PlaceStat => ({\r\n    id: payload['id'],\r\n    name: payload['name'],\r\n    address: payload['address'],\r\n    incentive: payload['incentive'],\r\n    numVisit: payload['numVisit'],\r\n    numMission: payload['numMission'],\r\n    numSuccess: payload['numSuccess'],\r\n    lastVisitTime: payload['lastVisitTime']\r\n})\r\n\r\nexport interface OverallStat {\r\n    createTime: number,\r\n    updateTime: number,\r\n    numPlaces: number,\r\n    incentive: number,\r\n    numVisit: number,\r\n    numMission: number,\r\n    numSuccess: number,\r\n    numDaysMissions: number,\r\n    lastMissionDay: number\r\n}\r\n\r\nexport const toOverallStat = (payload: any): OverallStat => ({\r\n    createTime: payload['createTime'],\r\n    updateTime: payload['updateTime'],\r\n    numPlaces: payload['numPlaces'],\r\n    incentive: payload['incentive'],\r\n    numVisit: payload['numVisit'],\r\n    numSuccess: payload['numSuccess'],\r\n    numMission: payload['numMission'],\r\n    numDaysMissions: payload['numDaysMissions'],\r\n    lastMissionDay: payload['lastMissionDay']\r\n})\r\n\r\nexport const EMAIL_TO_NAME = new Map<string, string>([\r\n    [\"4401dudgus3@gmail.com\", \"고영현\"],\r\n    [\"keonhan1171@gmail.com\", \"김건한\"],\r\n    [\"doyoung9803@gmail.com\", \"김도영\"],\r\n    [\"boson95@gmail.com\", \"김도형\"],\r\n    [\"rlarlgus97@gmail.com\", \"김민정\"],\r\n    [\"xodwk1205@gmail.com\", \"김보경\"],\r\n    [\"qhtjd5421@gmail.com\", \"김보성\"],\r\n    [\"js99962102@gmail.com\", \"김보연\"],\r\n    [\"sue2368@gmail.com\", \"김세현\"],\r\n    [\"mody3062@gmail.com\", \"김예린\"],\r\n    [\"jjgod4490@gmail.com\", \"김인섭\"],\r\n    [\"wjdaud923@gmail.com\", \"김정명\"],\r\n    [\"jw950310@gmail.com\", \"김정우\"],\r\n    [\"iplay93@gmail.com\", \"김현주\"],\r\n    [\"hkkim1227@gmail.com\", \"김형근\"],\r\n    [\"naeunjee7907@gmail.com\", \"나은지\"],\r\n    [\"jiyoon0424@gmail.com\", \"명지윤\"],\r\n    [\"jaehyuk705@gmail.com\", \"문재혁\"],\r\n    [\"2qkrtkdfuf@naver.com\", \"박동훈\"],\r\n    [\"kbg04191@gmail.com\", \"박성호\"],\r\n    [\"pink0151@gmail.com\", \"박인영\"],\r\n    [\"skypeperfectedu@gmail.com\", \"박재순\"],\r\n    [\"pk32167@gamil.com\", \"박현욱\"],\r\n    [\"jeesoo100412@gmail.com\", \"백지수\"],\r\n    [\"ehdgus030212@gmail.com\", \"안동현\"],\r\n    [\"dbtjd5567@gmail.com\", \"유성진\"],\r\n    [\"santa3091@gmail.com\", \"이동은\"],\r\n    [\"dlalsgud0625@gmail.com\", \"이민형\"],\r\n    [\"dltmdqh7577@gmail.com\", \"이승보\"],\r\n    [\"sylee0665@gmail.com\", \"이승윤\"],\r\n    [\"bugiljaewoo@gmail.com\", \"이재우\"],\r\n    [\"jihee931110@gmail.com\", \"이지희\"],\r\n    [\"beskkuim@gmail.com\", \"장형운\"],\r\n    [\"wjstnwp12345@gmail.com\", \"전수제\"],\r\n    [\"chungp607@gmail.com\", \"정바울\"],\r\n    [\"chungsea99@gmail.com\", \"정세아\"],\r\n    [\"winjungle@gmail.com\", \"정승재\"],\r\n    [\"gusrbwjd1229@gmail.com\", \"정현규\"],\r\n    [\"cyj3141@kaist.ac.kr\", \"최유진\"],\r\n    [\"gkswogus2437@gmail.com\", \"한재현\"],\r\n    [\"jeehyunhong97@gmail.com\", \"홍지현\"],\r\n    [\"gomsing1122@gmail.com\", \"황유진\"]\r\n])\r\n\r\n\r\n\r\n","import * as React from 'react'\r\nimport {Tab, Tabs} from \"@material-ui/core\";\r\nimport {useState} from \"react\";\r\nimport {EventList} from \"./EventList\";\r\nimport {PlaceList} from \"./PlaceList\";\r\nimport {MissionList} from \"./MissionList\";\r\n\r\nexport enum ViewType {\r\n    Events, Missions, Places\r\n}\r\n\r\nexport const SelectedUser: React.FunctionComponent<Props> = ({email}) => {\r\n    const [state, setState] = useState<State>({\r\n        viewType: ViewType.Events\r\n    })\r\n\r\n    const handleChange = (event: React.ChangeEvent<{}>, newValue: ViewType) => {\r\n        setState({\r\n            ...state,\r\n            viewType: newValue\r\n        })\r\n    }\r\n\r\n    const getTabPanel = (viewType: ViewType): React.ReactNode => {\r\n        switch (viewType) {\r\n            case ViewType.Events:\r\n                return <EventList email={email}/>\r\n            case ViewType.Missions:\r\n                return <MissionList email={email}/>\r\n            case ViewType.Places:\r\n                return <PlaceList email={email}/>\r\n            default:\r\n                return undefined\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Tabs value={state.viewType} onChange={handleChange}>\r\n                <Tab id={\"events\"} label={\"Events\"} value={ViewType.Events}/>\r\n                <Tab id={\"missions\"} label={\"Missions\"} value={ViewType.Missions}/>\r\n                <Tab id={\"places\"} label={\"Places\"} value={ViewType.Places}/>\r\n            </Tabs>\r\n            <div>\r\n                { getTabPanel(state.viewType) }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ninterface State {\r\n    viewType: ViewType\r\n}\r\n\r\ninterface Props {\r\n    email: string\r\n}","import * as React from 'react'\r\nimport MaterialTable, { Action, Column } from 'material-table'\r\nimport {GlobalState, listUsers} from \"../redux/ducks\";\r\nimport {useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport { EMAIL_TO_NAME } from \"../redux/data\";\r\nimport * as DateFns from 'date-fns'\r\n\r\nexport const UserList: React.FunctionComponent<Props> = ({onUserClick}) => {\r\n\r\n    const userStats = useSelector((state: GlobalState) => state.userStats)\r\n    const isInProgress = useSelector((state: GlobalState) => state.isInProgress)\r\n\r\n    const columns: Array<Column<RowData>> = [\r\n        { title: 'Email', field: 'email'},\r\n        { title: 'Name', field: 'name'},\r\n        { title: 'Created', field: 'create'},\r\n        { title: 'Last Updated', field: 'update'},\r\n        { title: 'Incentive', field: 'incentive'},\r\n        { title: '# Success', field: 'mission'},\r\n        { title: '# Days on Mission', field: 'days'},\r\n    ]\r\n\r\n    const data: Array<RowData> = userStats.map(stat => ({\r\n        email: stat.email,\r\n        name: EMAIL_TO_NAME.get(stat.email),\r\n        create: DateFns.format(stat.stat.createTime, \"yyyy-MM-dd HH:mm:ss\"),\r\n        update: DateFns.format(stat.stat.updateTime, \"yyyy-MM-dd HH:mm:ss\"),\r\n        incentive: stat.stat.incentive ?? 0,\r\n        mission: `${stat.stat.numSuccess} / ${stat.stat.numMission}`,\r\n        days: stat.stat.numDaysMissions,\r\n    })).filter(value => value.name !== undefined)\r\n\r\n    const handleClick = (event: any, rowData: RowData | RowData[]) => {\r\n        if (!Array.isArray(rowData)) {\r\n            const email = rowData.email\r\n            if (email ) onUserClick?.(email)\r\n        }\r\n    }\r\n\r\n    const action: Action<RowData> = {\r\n        icon: 'details',\r\n        onClick: handleClick\r\n    }\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(listUsers())\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <div>\r\n            <MaterialTable\r\n                title={\"Users\"}\r\n                columns={columns}\r\n                data={data}\r\n                actions={[action]}\r\n                isLoading={isInProgress}\r\n                options={{\r\n                    actionsColumnIndex: -1,\r\n                    showTitle: false,\r\n                    exportButton: true,\r\n                    paging: false\r\n                }}/>\r\n        </div>\r\n    )\r\n}\r\n\r\ninterface RowData {\r\n    email?: string,\r\n    name?: string,\r\n    create?: string,\r\n    update?: string,\r\n    incentive?: number,\r\n    mission?: string,\r\n    days?: number\r\n}\r\n\r\ninterface Props {\r\n    onUserClick?: (email: string) => void\r\n}\r\n\r\n","import * as React from \"react\";\r\nimport {useCallback, useEffect, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {GlobalState, listEvents} from \"../redux/ducks\";\r\nimport {KeyboardDatePicker} from '@material-ui/pickers'\r\nimport MaterialTable, {Column, MTableToolbar} from 'material-table'\r\nimport * as DateFns from 'date-fns'\r\nimport {MaterialUiPickersDate} from \"@material-ui/pickers/typings/date\";\r\nimport {createStyles, makeStyles} from \"@material-ui/core/styles\";\r\nimport {FormControlLabel, Switch} from \"@material-ui/core\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) =>\r\n    createStyles({\r\n        toolBarControl: {\r\n            marginLeft: theme.spacing(3)\r\n        },\r\n        progress: {\r\n            marginTop: theme.spacing(5),\r\n            display: 'flex',\r\n            justifyContent: 'center'\r\n        }\r\n    })\r\n)\r\n\r\nexport const EventList: React.FunctionComponent<Props> = ({email}) => {\r\n    const classes = useStyles()\r\n\r\n    const [state, setState] = useState<State>({\r\n        isRangeChecked: false,\r\n        fromDate: DateFns.startOfDay(Date.now()).getTime(),\r\n        toDate: DateFns.startOfDay(Date.now()).getTime()\r\n    })\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const events = useSelector((state: GlobalState) => state.selectedUserStat.events)\r\n    const isInProgress = useSelector((state: GlobalState) => state.isInProgress)\r\n\r\n    const columns: Array<Column<RowData>> = [\r\n        {title: 'Date', field: 'date'},\r\n        {title: 'Time', field: 'time', export: false},\r\n        {title: 'Duration', field: 'durationStr', export: false},\r\n        {title: 'Location', field: 'location', export: false},\r\n        {title: 'StartTime', field: 'startTime', hidden: true},\r\n        {title: 'EndTime', field: 'endTime', hidden: true},\r\n        {title: 'Duration', field: 'duration', hidden: true},\r\n        {title: 'Latitude', field: 'latitude', hidden: true},\r\n        {title: 'Longitude', field: 'longitude', hidden: true},\r\n        {title: 'GeoHash', field: 'geoHash', hidden: true}\r\n    ]\r\n\r\n    const data: Array<RowData> = events?.map(event => {\r\n        const date = DateFns.format(event.startTime, \"yyyy-MM-dd\")\r\n        const startTime = DateFns.format(event.startTime, \"HH:mm:ss\")\r\n        const endTime = event.endTime <= Date.now() ? DateFns.format(event.endTime, \"HH:mm:ss\") : \"\"\r\n        const duration = Math.floor(event.duration / 1000 / 60)\r\n        const latitude = event.latitude\r\n        const longitude = event.longitude\r\n        const geoHash = event.geoHash\r\n        return {\r\n            time: `${startTime} - ${endTime}`,\r\n            location: `${latitude}, ${longitude} (${geoHash})`,\r\n            durationStr: `${duration} min.`,\r\n            startTime: event.startTime,\r\n            endTime: event.endTime,\r\n            duration: event.duration,\r\n            date,\r\n            latitude,\r\n            longitude,\r\n            geoHash\r\n        }\r\n    }) ?? []\r\n\r\n    const handleFromDateChanged = (date?: MaterialUiPickersDate) => {\r\n        if (!date) return\r\n\r\n        const selectedDate = date.getTime()\r\n\r\n        setState({\r\n            ...state,\r\n            fromDate: selectedDate\r\n        })\r\n    }\r\n\r\n    const handleToDateChanged = (date?: MaterialUiPickersDate) => {\r\n        if (!date) return\r\n        const selectedDate = date.getTime()\r\n\r\n        setState({\r\n            ...state,\r\n            toDate: selectedDate\r\n        })\r\n    }\r\n\r\n    const handleRangeChecked = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setState({\r\n            ...state,\r\n            isRangeChecked: event.target.checked\r\n        })\r\n    }\r\n\r\n    const loadData = useCallback((email: string, fromDate: number, toDate: number) => {\r\n        let start: number | Array<number>\r\n        let end: number | Array<number>\r\n\r\n        let diffDays = DateFns.differenceInDays(toDate, fromDate)\r\n        if (diffDays < 0) diffDays = 0\r\n\r\n        start = []\r\n        end = []\r\n\r\n        for (let i = 0; i <= diffDays; i++) {\r\n            const s = DateFns.addDays(DateFns.startOfDay(fromDate), i).getTime()\r\n            const e = DateFns.addDays(DateFns.startOfDay(fromDate), i + 1).getTime()\r\n            start.push(s)\r\n            end.push(e)\r\n        }\r\n\r\n        dispatch(\r\n            listEvents(email, start, end)\r\n        )\r\n    }, [dispatch])\r\n\r\n    useEffect(() => {\r\n        loadData(email, state.fromDate, state.toDate)\r\n    }, [email, loadData, state.fromDate, state.toDate])\r\n\r\n    return (\r\n        <div>\r\n            <MaterialTable\r\n                columns={columns}\r\n                data={data}\r\n                isLoading={isInProgress}\r\n                components={{\r\n                    Toolbar: props => (\r\n                        <div>\r\n                            <MTableToolbar {...props}/>\r\n                            <FormControlLabel\r\n                                className={classes.toolBarControl}\r\n                                control={\r\n                                    <Switch\r\n                                        checked={state.isRangeChecked}\r\n                                        onChange={handleRangeChecked}\r\n                                        color={'secondary'}\r\n                                    />\r\n                                }\r\n                                label={\"Range\"}\r\n                            />\r\n                            <KeyboardDatePicker\r\n                                className={classes.toolBarControl}\r\n                                variant={'inline'}\r\n                                format={'yyyy-MM-dd'}\r\n                                value={state.fromDate}\r\n                                onChange={handleFromDateChanged}\r\n                            />\r\n                            {\r\n                                state.isRangeChecked ?\r\n                                    <KeyboardDatePicker\r\n                                        className={classes.toolBarControl}\r\n                                        variant={'inline'}\r\n                                        format={'yyyy-MM-dd'}\r\n                                        value={state.toDate}\r\n                                        onChange={handleToDateChanged}\r\n                                    /> : undefined\r\n                            }\r\n                        </div>\r\n                    )\r\n                }}\r\n                options={{\r\n                    showTitle: false,\r\n                    exportButton: true,\r\n                    exportFileName: `${email}-event.csv`,\r\n                    paging: false,\r\n                }}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\ninterface RowData {\r\n    date?: string,\r\n    time?: string,\r\n    location?: string,\r\n    durationStr?: string,\r\n    startTime: number,\r\n    endTime: number,\r\n    duration: number,\r\n    latitude: number,\r\n    longitude: number,\r\n    geoHash: string\r\n}\r\n\r\ninterface Props {\r\n    email: string\r\n}\r\n\r\ninterface State {\r\n    fromDate: number,\r\n    toDate: number\r\n    isRangeChecked: boolean\r\n}","import * as React from \"react\";\r\nimport * as Geohash from 'ngeohash'\r\nimport MaterialTable, {Column} from 'material-table'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {GlobalState, listPlaces} from \"../redux/ducks\";\r\nimport {useEffect} from \"react\";\r\n\r\nexport const PlaceList: React.FunctionComponent<Props> = ({email}) => {\r\n\r\n    const places = useSelector((state: GlobalState) => state.selectedUserStat.places)\r\n    const isInProgress = useSelector((state: GlobalState) => state.isInProgress)\r\n\r\n    const columns: Array<Column<RowData>> = [\r\n        {title: 'Name', field: 'name'},\r\n        {title: 'Address', field: 'address'},\r\n        {title: 'Incentive', field: 'incentive'},\r\n        {title: 'Mission', field: 'mission', export: false},\r\n        {title: 'Location', field: 'location', export: false},\r\n        {title: 'NumMission', field: 'numMission', hidden: true},\r\n        {title: 'NumSuccess', field: 'numSuccess', hidden: true},\r\n        {title: 'Latitude', field: 'latitude', hidden: true},\r\n        {title: 'Longitude', field: 'longitude', hidden: true},\r\n        {title: 'GeoHash', field: 'geoHash', hidden: true}\r\n    ]\r\n\r\n    const data: Array<RowData> = places?.map(place => {\r\n        const name = place.name\r\n        const address = place.address\r\n        const incentive = place.incentive\r\n        const numMission = place.numMission\r\n        const numSuccess = place.numSuccess\r\n        const geoHash = place.id\r\n        const latlon = Geohash.decode(place.id)\r\n        const latitude = latlon.latitude\r\n        const longitude = latlon.longitude\r\n\r\n        return {\r\n            name,\r\n            address,\r\n            incentive,\r\n            numMission,\r\n            numSuccess,\r\n            geoHash,\r\n            latitude,\r\n            longitude,\r\n            mission: `${numSuccess} / ${numMission}`,\r\n            location: `${latitude}, ${longitude} (${place.id})`\r\n        }\r\n    }) ?? []\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(listPlaces(email))\r\n    }, [dispatch, email])\r\n\r\n    return (\r\n        <div>\r\n            <MaterialTable\r\n                columns={columns}\r\n                data={data}\r\n                isLoading={isInProgress}\r\n                options={{\r\n                    showTitle: false,\r\n                    exportButton: true,\r\n                    exportFileName: `${email}-place.csv`,\r\n                    paging: false\r\n                }}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\ninterface RowData {\r\n    name: string,\r\n    address: string,\r\n    location: string,\r\n    incentive: number,\r\n    mission: string,\r\n    numMission: number,\r\n    numSuccess: number,\r\n    latitude: number,\r\n    longitude: number,\r\n    geoHash: string\r\n}\r\n\r\ninterface Props {\r\n    email: string\r\n}","import * as React from \"react\";\r\nimport MaterialTable, {Column, MTableToolbar} from 'material-table'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {GlobalState, listMissions} from \"../redux/ducks\";\r\nimport {useCallback, useEffect, useState} from \"react\";\r\nimport {KeyboardDatePicker} from \"@material-ui/pickers\";\r\nimport {MaterialUiPickersDate} from \"@material-ui/pickers/typings/date\";\r\nimport * as DateFns from 'date-fns'\r\nimport {createStyles, makeStyles} from \"@material-ui/core/styles\";\r\nimport {FormControlLabel, Switch} from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme) =>\r\n    createStyles({\r\n        toolBarControl: {\r\n            marginLeft: theme.spacing(3)\r\n        },\r\n        progress: {\r\n            marginTop: theme.spacing(5),\r\n            display: 'flex',\r\n            justifyContent: 'center'\r\n        }\r\n    })\r\n)\r\n\r\nexport const MissionList: React.FunctionComponent<Props> = ({email}) => {\r\n    const classes = useStyles()\r\n\r\n    const [state, setState] = useState<State>({\r\n        isRangeChecked: false,\r\n        fromDate: DateFns.startOfDay(Date.now()).getTime(),\r\n        toDate: DateFns.startOfDay(Date.now()).getTime()\r\n    })\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const missions = useSelector((state: GlobalState) => state.selectedUserStat.missions)\r\n    const isInProgress = useSelector((state: GlobalState) => state.isInProgress)\r\n\r\n    const columns: Array<Column<RowData>> = [\r\n        {title: 'Date', field: 'date'},\r\n        {title: 'Time', field: 'time', export: false},\r\n        {title: 'State', field: 'state'},\r\n        {title: 'Incentive', field: 'incentive'},\r\n        {title: 'Location', field: 'location', export: false},\r\n        {title: 'PrepareTime', field: 'prepareTime', hidden: true},\r\n        {title: 'StandByTime', field: 'standByTime', hidden: true},\r\n        {title: 'TriggerTime', field: 'triggerTime', hidden: true},\r\n        {title: 'ReactionTime', field: 'reactionTime', hidden: true},\r\n        {title: 'Latitude', field: 'latitude', hidden: true},\r\n        {title: 'Longitude', field: 'longitude', hidden: true},\r\n        {title: 'GeoHash', field: 'geoHash', hidden: true}\r\n    ]\r\n    const format = \"HH:mm:ss\"\r\n\r\n    const data: Array<RowData> = missions?.map(mission => {\r\n        const date = mission.triggerTime === 0 ? \"\" : DateFns.format(mission.triggerTime, \"yyyy-MM-dd\")\r\n        const prepareTime = mission.prepareTime\r\n        const standByTime = mission.standByTime\r\n        const triggerTime = mission.triggerTime\r\n        const reactionTime = mission.reactionTime\r\n\r\n        const startTime = DateFns.format(prepareTime, format)\r\n        const end = Math.max(\r\n            standByTime,\r\n            triggerTime,\r\n            reactionTime\r\n        )\r\n        const endTime = end === 0 ? \"\" : DateFns.format(end, format)\r\n        const state = mission.state\r\n        const incentive = mission.incentive\r\n        const latitude = mission.latitude\r\n        const longitude = mission.longitude\r\n        const geoHash = mission.geoHash\r\n\r\n        return {\r\n            time: `${startTime} - ${endTime}`,\r\n            location: `${latitude}, ${longitude} (${geoHash})`,\r\n            incentive,\r\n            state,\r\n            prepareTime,\r\n            standByTime,\r\n            triggerTime,\r\n            reactionTime,\r\n            latitude,\r\n            longitude,\r\n            geoHash,\r\n            date\r\n        }\r\n    }) ?? []\r\n\r\n    const handleFromDateChanged = (date?: MaterialUiPickersDate) => {\r\n        if (!date) return\r\n\r\n        const selectedDate = date.getTime()\r\n\r\n        setState({\r\n            ...state,\r\n            fromDate: selectedDate\r\n        })\r\n    }\r\n\r\n    const handleToDateChanged = (date?: MaterialUiPickersDate) => {\r\n        if (!date) return\r\n        const selectedDate = date.getTime()\r\n\r\n        setState({\r\n            ...state,\r\n            toDate: selectedDate\r\n        })\r\n    }\r\n\r\n    const handleRangeChecked = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setState({\r\n            ...state,\r\n            isRangeChecked: event.target.checked\r\n        })\r\n    }\r\n\r\n    const loadData = useCallback((email: string, fromDate: number, toDate: number) => {\r\n        let diffDays = DateFns.differenceInDays(toDate, fromDate)\r\n        if (diffDays < 0) diffDays = 0\r\n\r\n        const start = DateFns.startOfDay(fromDate).getTime()\r\n        const end = DateFns.addDays(DateFns.startOfDay(fromDate), diffDays + 1).getTime()\r\n\r\n        dispatch(\r\n            listMissions(email, start, end)\r\n        )\r\n    }, [dispatch])\r\n\r\n\r\n    useEffect(() => {\r\n        loadData(email, state.fromDate, state.toDate)\r\n    }, [email, loadData, state.fromDate, state.toDate])\r\n\r\n    return (\r\n        <div>\r\n\r\n            <MaterialTable\r\n                columns={columns}\r\n                data={data}\r\n                isLoading={isInProgress}\r\n                components={{\r\n                    Toolbar: props => (\r\n                        <div>\r\n                            <MTableToolbar {...props}/>\r\n                            <FormControlLabel\r\n                                className={classes.toolBarControl}\r\n                                control={\r\n                                    <Switch\r\n                                        checked={state.isRangeChecked}\r\n                                        onChange={handleRangeChecked}\r\n                                        color={'secondary'}\r\n                                    />\r\n                                }\r\n                                label={\"Range\"}\r\n                            />\r\n                            <KeyboardDatePicker\r\n                                className={classes.toolBarControl}\r\n                                variant={'inline'}\r\n                                format={'yyyy-MM-dd'}\r\n                                value={state.fromDate}\r\n                                onChange={handleFromDateChanged}\r\n                            />\r\n                            {\r\n                                state.isRangeChecked ?\r\n                                    <KeyboardDatePicker\r\n                                        className={classes.toolBarControl}\r\n                                        variant={'inline'}\r\n                                        format={'yyyy-MM-dd'}\r\n                                        value={state.toDate}\r\n                                        onChange={handleToDateChanged}\r\n                                    /> : undefined\r\n                            }\r\n\r\n                        </div>\r\n                    )\r\n                }}\r\n                options={{\r\n                    showTitle: false,\r\n                    exportButton: true,\r\n                    exportFileName: `${email}-mission.csv`,\r\n                    paging: false,\r\n                }}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\ninterface RowData {\r\n    date: string,\r\n    time: string,\r\n    state: string,\r\n    incentive: number,\r\n    location: string,\r\n    prepareTime: number,\r\n    standByTime: number,\r\n    triggerTime: number,\r\n    reactionTime: number,\r\n    latitude: number,\r\n    longitude: number,\r\n    geoHash: string,\r\n}\r\n\r\ninterface Props {\r\n    email: string\r\n}\r\n\r\ninterface State {\r\n    isRangeChecked: boolean,\r\n    fromDate: number,\r\n    toDate: number\r\n}","import * as React from 'react';\n\nimport {\n    AppBar,\n    Container,\n    CssBaseline,\n    IconButton,\n    Toolbar,\n    Typography\n} from '@material-ui/core';\nimport {UserList} from \"./component/UserList\";\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport {useState} from \"react\";\nimport {SelectedUser} from \"./component/SelectedUser\";\n\n\n\nexport const App: React.FunctionComponent = () => {\n    const [state, setState] = useState<State>({\n        showUsers: true,\n        selectedEmail: undefined\n    })\n\n\n    const handleUserClick = (email: string) => {\n        setState({\n            ...state,\n            showUsers: false,\n            selectedEmail: email\n        })\n    }\n\n    const handleBackClick = () => {\n        setState({\n            ...state,\n            showUsers: true,\n            selectedEmail: undefined,\n        })\n    }\n    return (\n        <Container maxWidth={'lg'}>\n            <CssBaseline/>\n\n            <AppBar position={\"sticky\"}>\n                <Toolbar>\n                    {\n                        !state.showUsers ?\n                            (<IconButton edge={'start'} color={'inherit'}>\n                                <ArrowBackIcon onClick={handleBackClick}/>\n                            </IconButton>)\n                            : undefined\n                    }\n\n                    <Typography variant={'h6'}>\n                        { state.showUsers ? \"Users\" : state.selectedEmail }\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n            <div>\n                {\n                    state.showUsers ?\n                        <UserList onUserClick={handleUserClick}/> :\n                        (state.selectedEmail ? <SelectedUser email={state.selectedEmail}/> : undefined)\n                }\n            </div>\n        </Container>\n    )\n}\n\ninterface State {\n    showUsers: boolean,\n    selectedEmail?: string\n}","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker'\nimport {createStore, applyMiddleware} from 'redux'\nimport createSagaMiddleware from 'redux-saga'\nimport {createLogger} from 'redux-logger'\nimport rootSaga, {reducer} from \"./redux/ducks\"\nimport {Provider} from 'react-redux'\nimport {createMuiTheme, ThemeProvider} from \"@material-ui/core\"\nimport {MuiPickersUtilsProvider} from \"@material-ui/pickers\"\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport {App} from './App'\n\n\nconst logger = createLogger()\nconst sagaMiddleware = createSagaMiddleware()\n\nconst store = createStore(\n    reducer,\n    applyMiddleware(sagaMiddleware, logger)\n)\n\nconst theme = createMuiTheme({\n    palette: {\n        type: 'dark'\n    }\n})\n\nsagaMiddleware.run(rootSaga)\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <ThemeProvider theme={theme}>\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                    <App/>\n                </MuiPickersUtilsProvider>\n            </ThemeProvider>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}